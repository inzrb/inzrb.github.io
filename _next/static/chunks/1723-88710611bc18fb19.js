"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1723],{3387:function(e,t,r){r.d(t,{xu:function(){return l}});var i=r(8126),n=r(959),a=r(4771);function o(e,t){let r=e+"Geometry";return n.forwardRef(({args:e,children:a,...o},l)=>{let s=n.useRef(null);return n.useImperativeHandle(l,()=>s.current),n.useLayoutEffect(()=>void(null==t||t(s.current))),n.createElement("mesh",(0,i.Z)({ref:s},o),n.createElement(r,{attach:"geometry",args:e}),a)})}let l=o("box");o("circle"),o("cone"),o("cylinder"),o("sphere"),o("plane"),o("tube"),o("torus"),o("torusKnot"),o("tetrahedron"),o("ring"),o("polyhedron"),o("icosahedron"),o("octahedron"),o("dodecahedron"),o("extrude"),o("lathe"),o("capsule"),o("shape",({geometry:e})=>{let t=e.attributes.position,r=new a.Box3().setFromBufferAttribute(t),i=new a.Vector3;r.getSize(i);let n=[],o=0,l=0,s=0,c=0;for(let e=0;e<t.count;e++)o=t.getX(e),l=t.getY(e),s=(o-r.min.x)/i.x,c=(l-r.min.y)/i.y,n.push(s,c);e.setAttribute("uv",new a.Float32BufferAttribute(n,2))})},3676:function(e,t,r){let i;r.d(t,{V2:function(){return q},xC:function(){return Q},F7:function(){return er},lZ:function(){return et}});var n=r(471),a=r(959),o=r(4771),l=r(5542);function s(){return(s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i])}return e}).apply(this,arguments)}var c=0;function u(e){return"__private_"+c+++"_"+e}function d(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw TypeError("attempted to use private field on non-instance");return e}var f="#define GLSLIFY 1\nvarying vec2 vUv;void main(){vUv=position.xy*0.5+0.5;gl_Position=vec4(position.xy,1.0,1.0);}",p="#define GLSLIFY 1\nuniform sampler2D inputTexture;uniform sampler2D accumulatedTexture;uniform sampler2D velocityTexture;uniform sampler2D lastVelocityTexture;uniform sampler2D depthTexture;uniform float temporalResolveCorrectionMix;varying vec2 vUv;\n#include <packing>\n#define min3(a, b, c) min(a, min(b, c))\n#define min4(a, b, c, d) min(a, min3(b, c, d))\n#define min5(a, b, c, d, e) min(a, min4(b, c, d, e))\n#define min6(a, b, c, d, e, f) min(a, min5(b, c, d, e, f))\n#define min7(a, b, c, d, e, f, g) min(a, min6(b, c, d, e, f, g))\n#define min8(a, b, c, d, e, f, g, h) min(a, min7(b, c, d, e, f, g, h))\n#define min9(a, b, c, d, e, f, g, h, i) min(a, min8(b, c, d, e, f, g, h, i))\n#define max3(a, b, c) max(a, max(b, c))\n#define max4(a, b, c, d) max(a, max3(b, c, d))\n#define max5(a, b, c, d, e) max(a, max4(b, c, d, e))\n#define max6(a, b, c, d, e, f) max(a, max5(b, c, d, e, f))\n#define max7(a, b, c, d, e, f, g) max(a, max6(b, c, d, e, f, g))\n#define max8(a, b, c, d, e, f, g, h) max(a, max7(b, c, d, e, f, g, h))\n#define max9(a, b, c, d, e, f, g, h, i) max(a, max8(b, c, d, e, f, g, h, i))\nvec2 getVelocity(sampler2D tex,vec2 uv,vec2 texSize){float closestDepth=100.0;vec2 closestUVOffset;for(int j=-1;j<=1;++j){for(int i=-1;i<=1;++i){vec2 uvOffset=vec2(i,j)/texSize;float neighborDepth=unpackRGBAToDepth(textureLod(depthTexture,vUv+uvOffset,0.));if(neighborDepth<closestDepth){closestUVOffset=uvOffset;closestDepth=neighborDepth;}}}return textureLod(velocityTexture,vUv+closestUVOffset,0.).xy;}void main(){vec4 inputTexel=texture2D(inputTexture,vUv);vec4 accumulatedTexel;vec3 outputColor;ivec2 size=textureSize(inputTexture,0);vec2 pxSize=vec2(float(size.x),float(size.y));vec2 velUv=texture2D(velocityTexture,vUv).xy;vec2 reprojectedUv=vUv-velUv;vec2 lastVelUv=texture2D(lastVelocityTexture,reprojectedUv).xy;float velocityLength=length(lastVelUv-velUv);float velocityDisocclusion=(velocityLength-0.000005)*10.;velocityDisocclusion*=velocityDisocclusion;\n#ifdef DILATION\nvelUv=getVelocity(velocityTexture,vUv,pxSize);reprojectedUv=vUv-velUv;\n#endif\nvec3 averageNeighborColor;bool didReproject=true;float movement=length(velUv)*100.;if(movement>0.){vec2 px=1./pxSize;vec3 c02=texture2D(inputTexture,vUv+vec2(-px.x,px.y)).rgb;vec3 c12=texture2D(inputTexture,vUv+vec2(0.,px.y)).rgb;vec3 c22=texture2D(inputTexture,vUv+vec2(px.x,px.y)).rgb;vec3 c01=texture2D(inputTexture,vUv+vec2(-px.x,0.)).rgb;vec3 c11=inputTexel.rgb;vec3 c21=texture2D(inputTexture,vUv+vec2(px.x,0.)).rgb;vec3 c00=texture2D(inputTexture,vUv+vec2(-px.x,-px.y)).rgb;vec3 c10=texture2D(inputTexture,vUv+vec2(0.,-px.y)).rgb;vec3 c20=texture2D(inputTexture,vUv+vec2(px.x,-px.y)).rgb;averageNeighborColor=c02+c12+c22+c01+c11+c21+c00+c10+c20;averageNeighborColor/=9.;if(reprojectedUv.x>=0.&&reprojectedUv.x<=1.&&reprojectedUv.y>=0.&&reprojectedUv.y<=1.){accumulatedTexel=texture2D(accumulatedTexture,reprojectedUv);vec3 minNeighborColor=min9(c02,c12,c22,c01,c11,c21,c00,c10,c20);vec3 maxNeighborColor=max9(c02,c12,c22,c01,c11,c21,c00,c10,c20);vec3 clampedColor=clamp(accumulatedTexel.rgb,minNeighborColor,maxNeighborColor);float mixFactor=temporalResolveCorrectionMix*(1.+movement);mixFactor=min(mixFactor,1.);accumulatedTexel.rgb=mix(accumulatedTexel.rgb,clampedColor,mixFactor);}else{accumulatedTexel.rgb=inputTexel.rgb;didReproject=false;}}else{accumulatedTexel=texture2D(accumulatedTexture,vUv);}\n#include <custom_compose_shader>\ngl_FragColor=vec4(vec3(outputColor),alpha);}";let m=`
		#ifdef USE_SKINNING
		#ifdef BONE_TEXTURE
			uniform sampler2D prevBoneTexture;
			mat4 getPrevBoneMatrix( const in float i ) {
				float j = i * 4.0;
				float x = mod( j, float( boneTextureSize ) );
				float y = floor( j / float( boneTextureSize ) );
				float dx = 1.0 / float( boneTextureSize );
				float dy = 1.0 / float( boneTextureSize );
				y = dy * ( y + 0.5 );
				vec4 v1 = texture2D( prevBoneTexture, vec2( dx * ( x + 0.5 ), y ) );
				vec4 v2 = texture2D( prevBoneTexture, vec2( dx * ( x + 1.5 ), y ) );
				vec4 v3 = texture2D( prevBoneTexture, vec2( dx * ( x + 2.5 ), y ) );
				vec4 v4 = texture2D( prevBoneTexture, vec2( dx * ( x + 3.5 ), y ) );
				mat4 bone = mat4( v1, v2, v3, v4 );
				return bone;
			}
		#else
			uniform mat4 prevBoneMatrices[ MAX_BONES ];
			mat4 getPrevBoneMatrix( const in float i ) {
				mat4 bone = prevBoneMatrices[ int(i) ];
				return bone;
			}
		#endif
		#endif
	`,h=`
		vec3 transformed;

		// Get the normal
		${o.ShaderChunk.skinbase_vertex}
		${o.ShaderChunk.beginnormal_vertex}
		${o.ShaderChunk.skinnormal_vertex}
		${o.ShaderChunk.defaultnormal_vertex}

		// Get the current vertex position
		transformed = vec3( position );
		${o.ShaderChunk.skinning_vertex}
		newPosition = velocityMatrix * vec4( transformed, 1.0 );

		// Get the previous vertex position
		transformed = vec3( position );
		${o.ShaderChunk.skinbase_vertex.replace(/mat4 /g,"").replace(/getBoneMatrix/g,"getPrevBoneMatrix")}
		${o.ShaderChunk.skinning_vertex.replace(/vec4 /g,"")}
		prevPosition = prevVelocityMatrix * vec4( transformed, 1.0 );

		gl_Position = newPosition;

	`,v={uniforms:{prevVelocityMatrix:{value:new o.Matrix4},velocityMatrix:{value:new o.Matrix4},prevBoneTexture:{value:null},interpolateGeometry:{value:0},intensity:{value:1},boneTexture:{value:null},alphaTest:{value:0},map:{value:null},alphaMap:{value:null},opacity:{value:1}},vertexShader:`
			${o.ShaderChunk.skinning_pars_vertex}
			${m}

			uniform mat4 velocityMatrix;
			uniform mat4 prevVelocityMatrix;
			uniform float interpolateGeometry;
			varying vec4 prevPosition;
			varying vec4 newPosition;

			void main() {

				${h}

			}
		`,fragmentShader:`
			uniform float intensity;
			varying vec4 prevPosition;
			varying vec4 newPosition;

			void main() {
				#ifdef NEEDS_FULL_MOVEMENT
					gl_FragColor = vec4(1., 1., 1., 1. );
					return;
				#endif

				vec2 pos0 = (prevPosition.xy / prevPosition.w) * 0.5 + 0.5;
				vec2 pos1 = (newPosition.xy / newPosition.w) * 0.5 + 0.5;

				vec2 vel = pos1 - pos0;
				
				gl_FragColor = vec4( vel, 0., 1. );

			}
		`,defines:{MAX_BONES:256}};var x=u("cachedMaterials"),g=u("setVelocityMaterialInScene"),T=u("unsetVelocityMaterialInScene");class _ extends n.w2{constructor(e,t){super("VelocityPass"),Object.defineProperty(this,T,{value:M}),Object.defineProperty(this,g,{value:S}),Object.defineProperty(this,x,{writable:!0,value:new WeakMap}),this._scene=e,this._camera=t,this.renderTarget=new o.WebGLRenderTarget("undefined"!=typeof window?window.innerWidth:2e3,"undefined"!=typeof window?window.innerHeight:1e3,{minFilter:o.NearestFilter,magFilter:o.NearestFilter,type:o.HalfFloatType})}setSize(e,t){this.renderTarget.setSize(e,t)}render(e){d(this,g)[g](),e.setRenderTarget(this.renderTarget),e.clear(),e.render(this._scene,this._camera),d(this,T)[T]()}}function S(){this._scene.traverse(e=>{if(e.material){let t=e.material,[r,i]=d(this,x)[x].get(e)||[];d(this,x)[x].has(e)&&t===r||(i=new o.ShaderMaterial({uniforms:o.UniformsUtils.clone(v.uniforms),vertexShader:v.vertexShader,fragmentShader:v.fragmentShader,side:o.FrontSide}),d(this,x)[x].set(e,[t,i]));let n=e.material.userData.needsUpdatedReflections||e.material.map instanceof o.VideoTexture;n&&!Object.keys(i.defines).includes("NEEDS_FULL_MOVEMENT")?(i.defines.NEEDS_FULL_MOVEMENT="",i.needsUpdate=!0):!n&&Object.keys(i.defines).includes("NEEDS_FULL_MOVEMENT")&&(delete i.defines.NEEDS_FULL_MOVEMENT,i.needsUpdate=!0),i.uniforms.velocityMatrix.value.multiplyMatrices(this._camera.projectionMatrix,e.modelViewMatrix),e.material=i}})}function M(){this._scene.traverse(e=>{if(e.material){e.material.uniforms.prevVelocityMatrix.value.multiplyMatrices(this._camera.projectionMatrix,e.modelViewMatrix);let[t]=d(this,x)[x].get(e);e.material=t}})}let R=new o.Vector2;var E=u("velocityPass");class w extends n.w2{constructor(e,t,r,i={}){super("TemporalResolvePass"),Object.defineProperty(this,E,{writable:!0,value:null});let n=i.width||"undefined"!=typeof window?window.innerWidth:2e3,a=i.height||"undefined"!=typeof window?window.innerHeight:1e3;this.renderTarget=new o.WebGLRenderTarget(n,a,{minFilter:o.LinearFilter,magFilter:o.LinearFilter,type:o.HalfFloatType,depthBuffer:!1}),d(this,E)[E]=new _(e,t);let l=p.replace("#include <custom_compose_shader>",r);this.fullscreenMaterial=new o.ShaderMaterial({type:"TemporalResolveMaterial",uniforms:{inputTexture:new o.Uniform(null),accumulatedTexture:new o.Uniform(null),velocityTexture:new o.Uniform(d(this,E)[E].renderTarget.texture),lastVelocityTexture:new o.Uniform(null),depthTexture:new o.Uniform(null),temporalResolveMix:new o.Uniform(0),temporalResolveCorrectionMix:new o.Uniform(0)},vertexShader:f,fragmentShader:l}),this.setupAccumulatedTexture(n,a)}dispose(){this.renderTarget.dispose(),this.accumulatedTexture.dispose(),this.fullscreenMaterial.dispose(),d(this,E)[E].dispose()}setSize(e,t){this.renderTarget.setSize(e,t),d(this,E)[E].setSize(e,t),this.setupAccumulatedTexture(e,t)}setupAccumulatedTexture(e,t){this.accumulatedTexture&&this.accumulatedTexture.dispose(),this.accumulatedTexture=new o.FramebufferTexture(e,t,o.RGBAFormat),this.accumulatedTexture.minFilter=o.LinearFilter,this.accumulatedTexture.magFilter=o.LinearFilter,this.accumulatedTexture.type=o.HalfFloatType,this.lastVelocityTexture=new o.FramebufferTexture(e,t,o.RGBAFormat),this.lastVelocityTexture.minFilter=o.NearestFilter,this.lastVelocityTexture.magFilter=o.NearestFilter,this.lastVelocityTexture.type=o.HalfFloatType,this.fullscreenMaterial.uniforms.accumulatedTexture.value=this.accumulatedTexture,this.fullscreenMaterial.uniforms.lastVelocityTexture.value=this.lastVelocityTexture,this.fullscreenMaterial.needsUpdate=!0}render(e){d(this,E)[E].render(e),e.setRenderTarget(this.renderTarget),e.render(this.scene,this.camera),e.copyFramebufferToTexture(R,this.accumulatedTexture),e.setRenderTarget(d(this,E)[E].renderTarget),e.copyFramebufferToTexture(R,this.lastVelocityTexture)}}var y="#define GLSLIFY 1\nvec3 getViewPosition(const float depth){float clipW=_projectionMatrix[2][3]*depth+_projectionMatrix[3][3];vec4 clipPosition=vec4((vec3(vUv,depth)-0.5)*2.0,1.0);clipPosition*=clipW;return(_inverseProjectionMatrix*clipPosition).xyz;}float getViewZ(const in float depth){\n#ifdef PERSPECTIVE_CAMERA\nreturn perspectiveDepthToViewZ(depth,cameraNear,cameraFar);\n#else\nreturn orthographicDepthToViewZ(depth,cameraNear,cameraFar);\n#endif\n}vec3 screenSpaceToWorldSpace(const vec2 uv,const float depth){vec4 ndc=vec4((uv.x-0.5)*2.0,(uv.y-0.5)*2.0,(depth-0.5)*2.0,1.0);vec4 clip=_inverseProjectionMatrix*ndc;vec4 view=cameraMatrixWorld*(clip/clip.w);return view.xyz;}\n#define Scale (vec3(0.8, 0.8, 0.8))\n#define K (19.19)\nvec3 hash(vec3 a){a=fract(a*Scale);a+=dot(a,a.yxz+K);return fract((a.xxy+a.yxx)*a.zyx);}float fresnel_dielectric_cos(float cosi,float eta){float c=abs(cosi);float g=eta*eta-1.0+c*c;float result;if(g>0.0){g=sqrt(g);float A=(g-c)/(g+c);float B=(c*(g+c)-1.0)/(c*(g-c)+1.0);result=0.5*A*A*(1.0+B*B);}else{result=1.0;}return result;}float fresnel_dielectric(vec3 Incoming,vec3 Normal,float eta){float cosine=dot(Incoming,Normal);return min(1.0,5.0*fresnel_dielectric_cos(cosine,eta));}float czm_luminance(vec3 rgb){const vec3 W=vec3(0.2125,0.7154,0.0721);return dot(rgb,W);}";class b extends o.ShaderMaterial{constructor(){super({type:"MRTMaterial",defines:{USE_UV:"",TEMPORAL_RESOLVE:""},uniforms:{opacity:new o.Uniform(1),normalMap:new o.Uniform(null),normalScale:new o.Uniform(new o.Vector2(1,1)),uvTransform:new o.Uniform(new o.Matrix3),roughness:new o.Uniform(1),roughnessMap:new o.Uniform(null)},vertexShader:`
                 #ifdef USE_MRT
                out vec2 vHighPrecisionZW;
                #endif
                #define NORMAL
                #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
                    varying vec3 vViewPosition;
                #endif
                #include <common>
                #include <uv_pars_vertex>
                #include <displacementmap_pars_vertex>
                #include <normal_pars_vertex>
                #include <morphtarget_pars_vertex>
                #include <skinning_pars_vertex>
                #include <logdepthbuf_pars_vertex>
                #include <clipping_planes_pars_vertex>
                void main() {
                    #include <uv_vertex>
                    #include <beginnormal_vertex>
                    #include <morphnormal_vertex>
                    #include <skinbase_vertex>
                    #include <skinnormal_vertex>
                    #include <defaultnormal_vertex>
                    #include <normal_vertex>
                    #include <begin_vertex>
                    #include <morphtarget_vertex>
                    #include <skinning_vertex>
                    #include <displacementmap_vertex>
                    #include <project_vertex>
                    #include <logdepthbuf_vertex>
                    #include <clipping_planes_vertex>
                    #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
                        vViewPosition = - mvPosition.xyz;
                    #endif
                    #ifdef USE_MRT
                        vHighPrecisionZW = gl_Position.zw;
                    #endif 
                    #ifdef USE_UV
                        vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
                    #endif
                }
            `,fragmentShader:`
                 #define NORMAL
                #if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
                    varying vec3 vViewPosition;
                #endif
                #include <packing>
                #include <uv_pars_fragment>
                #include <normal_pars_fragment>
                #include <bumpmap_pars_fragment>
                #include <normalmap_pars_fragment>
                #include <logdepthbuf_pars_fragment>
                #include <clipping_planes_pars_fragment>
                #include <roughnessmap_pars_fragment>
                
                #ifdef USE_MRT
                layout(location = 0) out vec4 gNormal;
                layout(location = 1) out vec4 gDepth;
                
                in vec2 vHighPrecisionZW;
                #endif
                uniform float roughness;
                void main() {
                    #include <clipping_planes_fragment>
                    #include <logdepthbuf_fragment>
                    #include <normal_fragment_begin>
                    #include <normal_fragment_maps>

                    float roughnessFactor = roughness;
                    
                    if(roughness > 10.0e9){
                        roughnessFactor = 1.;
                    }else{
                        #ifdef USE_ROUGHNESSMAP
                            vec4 texelRoughness = texture2D( roughnessMap, vUv );
                            // reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture
                            roughnessFactor *= texelRoughness.g;
                        #endif
                    }

                    vec3 normalColor = packNormalToRGB( normal );
                    #ifdef USE_MRT
                        float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
                        vec4 depthColor = packDepthToRGBA( fragCoordZ );
                        gNormal = vec4( normalColor, roughnessFactor );
                        gDepth = depthColor;
                    #else
                        gl_FragColor = vec4(normalColor, roughnessFactor);
                    #endif
                }
            `,toneMapped:!1}),this.normalMapType=o.TangentSpaceNormalMap,this.normalScale=new o.Vector2(1,1),Object.defineProperty(this,"glslVersion",{get(){return"USE_MRT"in this.defines?o.GLSL3:null},set(e){}})}}class D extends o.ShaderMaterial{constructor(){super({type:"ReflectionsMaterial",uniforms:{inputTexture:new o.Uniform(null),accumulatedTexture:new o.Uniform(null),normalTexture:new o.Uniform(null),depthTexture:new o.Uniform(null),_projectionMatrix:new o.Uniform(new o.Matrix4),_inverseProjectionMatrix:new o.Uniform(new o.Matrix4),cameraMatrixWorld:new o.Uniform(new o.Matrix4),cameraNear:new o.Uniform(0),cameraFar:new o.Uniform(0),rayStep:new o.Uniform(.1),intensity:new o.Uniform(1),roughnessFadeOut:new o.Uniform(1),rayFadeOut:new o.Uniform(0),thickness:new o.Uniform(10),ior:new o.Uniform(1.45),maxDepthDifference:new o.Uniform(1),maxDepth:new o.Uniform(1),jitter:new o.Uniform(.5),jitterRough:new o.Uniform(.5),jitterSpread:new o.Uniform(1),maxRoughness:new o.Uniform(1),samples:new o.Uniform(0)},defines:{MAX_STEPS:20,NUM_BINARY_SEARCH_STEPS:5},fragmentShader:"#define GLSLIFY 1\nvarying vec2 vUv;uniform sampler2D inputTexture;uniform sampler2D accumulatedTexture;uniform sampler2D normalTexture;uniform sampler2D depthTexture;uniform mat4 _projectionMatrix;uniform mat4 _inverseProjectionMatrix;uniform mat4 cameraMatrixWorld;uniform float cameraNear;uniform float cameraFar;uniform float rayStep;uniform float intensity;uniform float maxDepthDifference;uniform float roughnessFadeOut;uniform float maxRoughness;uniform float maxDepth;uniform float rayFadeOut;uniform float thickness;uniform float ior;uniform float samples;\n#ifdef ENABLE_JITTERING\nuniform float jitter;uniform float jitterRough;uniform float jitterSpread;\n#endif\n#define FLOAT_EPSILON 0.00001\n#define EARLY_OUT_COLOR vec4(0., 0., 0., 1.)\nconst vec2 INVALID_RAY_COORDS=vec2(-1.);float _maxDepthDifference;float nearMinusFar;float nearMulFar;float farMinusNear;\n#include <packing>\n#include <helperFunctions>\nvec2 BinarySearch(inout vec3 dir,inout vec3 hitPos,inout float rayHitDepthDifference);vec2 RayMarch(vec3 dir,inout vec3 hitPos,inout float rayHitDepthDifference);float fastGetViewZ(const in float depth);void main(){vec4 depthTexel=textureLod(depthTexture,vUv,0.);if(dot(depthTexel.rgb,depthTexel.rgb)<FLOAT_EPSILON){gl_FragColor=EARLY_OUT_COLOR;return;}float unpackedDepth=unpackRGBAToDepth(depthTexel);if(unpackedDepth>maxDepth){gl_FragColor=EARLY_OUT_COLOR;return;}vec4 normalTexel=textureLod(normalTexture,vUv,0.);float roughness=normalTexel.a;if(roughness>maxRoughness||(roughness>1.-FLOAT_EPSILON&&roughnessFadeOut>1.-FLOAT_EPSILON)){gl_FragColor=EARLY_OUT_COLOR;return;}_maxDepthDifference=maxDepthDifference*0.01;nearMinusFar=cameraNear-cameraFar;nearMulFar=cameraNear*cameraFar;farMinusNear=cameraFar-cameraNear;float specular=1.-roughness;specular*=specular;normalTexel.rgb=unpackRGBToNormal(normalTexel.rgb);float depth=fastGetViewZ(unpackedDepth);vec3 viewNormal=normalTexel.xyz;vec3 viewPos=getViewPosition(depth);vec3 worldPos=screenSpaceToWorldSpace(vUv,unpackedDepth);vec3 jitt=vec3(0.);\n#ifdef ENABLE_JITTERING\nvec3 randomJitter=hash(5.*(samples*worldPos))-0.5;float spread=((2.-specular)+roughness*jitterRough)*jitterSpread;float jitterMix=jitter+jitterRough*roughness;if(jitterMix>1.)jitterMix=1.;jitt=mix(vec3(0.),randomJitter*spread,jitterMix);\n#endif\njitt=mix(jitt,vec3(0.),0.5);viewNormal+=jitt;vec3 reflected=normalize(reflect(normalize(viewPos),normalize(viewNormal)));vec3 rayDir=reflected*-viewPos.z;vec3 hitPos=viewPos;float rayHitDepthDifference;vec2 coords=RayMarch(rayDir,hitPos,rayHitDepthDifference);if(coords.x==-1.){gl_FragColor=EARLY_OUT_COLOR;return;}vec2 coordsNDC=(coords*2.0-1.0);float screenFade=0.1;float maxDimension=min(1.0,max(abs(coordsNDC.x),abs(coordsNDC.y)));float screenEdgefactor=1.0-(max(0.0,maxDimension-screenFade)/(1.0-screenFade));screenEdgefactor=max(0.,screenEdgefactor);vec4 SSRTexel=textureLod(inputTexture,coords.xy,0.);vec4 SSRTexelReflected=textureLod(accumulatedTexture,coords.xy,0.);vec3 SSR=SSRTexel.rgb+SSRTexelReflected.rgb;float roughnessFactor=mix(specular,1.,max(0.,1.-roughnessFadeOut));vec3 finalSSR=SSR*screenEdgefactor*roughnessFactor;if(rayFadeOut!=0.){vec3 hitWorldPos=screenSpaceToWorldSpace(coords,rayHitDepthDifference);float reflectionDistance=distance(hitWorldPos,worldPos);reflectionDistance+=1.;float opacity=1./(reflectionDistance*rayFadeOut*0.1);if(opacity>1.)opacity=1.;finalSSR*=opacity;}float fresnelFactor=fresnel_dielectric(normalize(viewPos),viewNormal,ior);finalSSR=finalSSR*fresnelFactor*intensity;finalSSR=min(vec3(1.),finalSSR);float alpha=hitPos.z==1. ? SSRTexel.a : SSRTexelReflected.a;gl_FragColor=vec4(finalSSR,alpha);}vec2 RayMarch(vec3 dir,inout vec3 hitPos,inout float rayHitDepthDifference){dir=normalize(dir);dir*=rayStep;float depth;vec4 projectedCoord;vec4 lastProjectedCoord;float unpackedDepth;float stepMultiplier=1.;vec4 depthTexel;for(int i=0;i<MAX_STEPS;i++){hitPos+=dir*stepMultiplier;projectedCoord=_projectionMatrix*vec4(hitPos,1.0);projectedCoord.xy/=projectedCoord.w;projectedCoord.xy=projectedCoord.xy*0.5+0.5;if(projectedCoord.x>1.||projectedCoord.y>1.){hitPos-=dir*stepMultiplier;stepMultiplier*=0.5;continue;}depthTexel=textureLod(depthTexture,projectedCoord.xy,0.);unpackedDepth=unpackRGBAToDepth(depthTexel);depth=fastGetViewZ(unpackedDepth);rayHitDepthDifference=depth-hitPos.z;if(rayHitDepthDifference>=0.&&rayHitDepthDifference<thickness){\n#if NUM_BINARY_SEARCH_STEPS == 0\nif(dot(depthTexel.rgb,depthTexel.rgb)<FLOAT_EPSILON)return INVALID_RAY_COORDS;\n#else\nreturn BinarySearch(dir,hitPos,rayHitDepthDifference);\n#endif\n}lastProjectedCoord=projectedCoord;}\n#ifndef STRETCH_MISSED_RAYS\nreturn INVALID_RAY_COORDS;\n#endif\nrayHitDepthDifference=unpackedDepth;hitPos.z=1.;return projectedCoord.xy;}vec2 BinarySearch(inout vec3 dir,inout vec3 hitPos,inout float rayHitDepthDifference){float depth;vec4 projectedCoord;vec2 lastMinProjectedCoordXY;float unpackedDepth;vec4 depthTexel;for(int i=0;i<NUM_BINARY_SEARCH_STEPS;i++){projectedCoord=_projectionMatrix*vec4(hitPos,1.0);projectedCoord.xy/=projectedCoord.w;projectedCoord.xy=projectedCoord.xy*0.5+0.5;if((lastMinProjectedCoordXY.x>1.||lastMinProjectedCoordXY.y>1.)&&(projectedCoord.x>1.||projectedCoord.y>1.))return INVALID_RAY_COORDS;depthTexel=textureLod(depthTexture,projectedCoord.xy,0.);unpackedDepth=unpackRGBAToDepth(depthTexel);depth=fastGetViewZ(unpackedDepth);rayHitDepthDifference=depth-hitPos.z;dir*=0.5;if(rayHitDepthDifference>0.0){hitPos-=dir;}else{hitPos+=dir;lastMinProjectedCoordXY=projectedCoord.xy;}}if(dot(depthTexel.rgb,depthTexel.rgb)<FLOAT_EPSILON)return INVALID_RAY_COORDS;if(abs(rayHitDepthDifference)>_maxDepthDifference)return INVALID_RAY_COORDS;projectedCoord=_projectionMatrix*vec4(hitPos,1.0);projectedCoord.xy/=projectedCoord.w;projectedCoord.xy=projectedCoord.xy*0.5+0.5;rayHitDepthDifference=unpackedDepth;return projectedCoord.xy;}float fastGetViewZ(const in float depth){\n#ifdef PERSPECTIVE_CAMERA\nreturn nearMulFar/(farMinusNear*depth-cameraFar);\n#else\nreturn depth*nearMinusFar-cameraNear;\n#endif\n}".replace("#include <helperFunctions>",y),vertexShader:f,toneMapped:!1,depthWrite:!1,depthTest:!1})}}let P=()=>{try{let e=document.createElement("canvas");return!!(window.WebGL2RenderingContext&&e.getContext("webgl2"))}catch(e){return!1}};var U=u("ssrEffect"),L=u("cachedMaterials"),O=u("USE_MRT"),C=u("webgl1DepthPass"),F=u("keepMaterialMapUpdated"),N=u("setMRTMaterialInScene"),A=u("unsetMRTMaterialInScene");class j extends n.w2{constructor(e,t={}){super("ReflectionsPass"),Object.defineProperty(this,A,{value:k}),Object.defineProperty(this,N,{value:B}),Object.defineProperty(this,F,{value:I}),Object.defineProperty(this,U,{writable:!0,value:void 0}),Object.defineProperty(this,L,{writable:!0,value:new WeakMap}),Object.defineProperty(this,O,{writable:!0,value:!1}),Object.defineProperty(this,C,{writable:!0,value:null}),d(this,U)[U]=e,this._scene=e._scene,this._camera=e._camera,this.fullscreenMaterial=new D,e._camera.isPerspectiveCamera&&(this.fullscreenMaterial.defines.PERSPECTIVE_CAMERA="");let r=t.width||"undefined"!=typeof window?window.innerWidth:2e3,i=t.height||"undefined"!=typeof window?window.innerHeight:1e3;this.renderTarget=new o.WebGLRenderTarget(r,i,{minFilter:o.LinearFilter,magFilter:o.LinearFilter,depthBuffer:!1}),this.renderPass=new n.CD(this._scene,this._camera),d(this,O)[O]=t.USE_MRT&&P(),d(this,O)[O]?(this.gBuffersRenderTarget=new o.WebGLMultipleRenderTargets(r,i,2,{minFilter:o.LinearFilter,magFilter:o.LinearFilter}),this.normalTexture=this.gBuffersRenderTarget.texture[0],this.depthTexture=this.gBuffersRenderTarget.texture[1]):(d(this,C)[C]=new n.Dv(this._scene,this._camera),d(this,C)[C].renderTarget.minFilter=o.LinearFilter,d(this,C)[C].renderTarget.magFilter=o.LinearFilter,d(this,C)[C].renderTarget.texture.minFilter=o.LinearFilter,d(this,C)[C].renderTarget.texture.magFilter=o.LinearFilter,d(this,C)[C].setSize("undefined"!=typeof window?window.innerWidth:2e3,"undefined"!=typeof window?window.innerHeight:1e3),this.gBuffersRenderTarget=new o.WebGLRenderTarget(r,i,{minFilter:o.LinearFilter,magFilter:o.LinearFilter}),this.normalTexture=this.gBuffersRenderTarget.texture,this.depthTexture=d(this,C)[C].texture),this.fullscreenMaterial.uniforms.normalTexture.value=this.normalTexture,this.fullscreenMaterial.uniforms.depthTexture.value=this.depthTexture,this.fullscreenMaterial.uniforms.accumulatedTexture.value=d(this,U)[U].temporalResolvePass.accumulatedTexture,this.fullscreenMaterial.uniforms.cameraMatrixWorld.value=this._camera.matrixWorld,this.fullscreenMaterial.uniforms._projectionMatrix.value=this._camera.projectionMatrix,this.fullscreenMaterial.uniforms._inverseProjectionMatrix.value=this._camera.projectionMatrixInverse}setSize(e,t){this.renderTarget.setSize(e*d(this,U)[U].resolutionScale,t*d(this,U)[U].resolutionScale),this.gBuffersRenderTarget.setSize(e*d(this,U)[U].resolutionScale,t*d(this,U)[U].resolutionScale),this.fullscreenMaterial.uniforms.accumulatedTexture.value=d(this,U)[U].temporalResolvePass.accumulatedTexture,this.fullscreenMaterial.needsUpdate=!0}dispose(){this.renderTarget.dispose(),this.gBuffersRenderTarget.dispose(),this.renderPass.dispose(),d(this,O)[O]||d(this,C)[C].dispose(),this.fullscreenMaterial.dispose(),this.normalTexture=null,this.depthTexture=null,this.velocityTexture=null}render(e,t){d(this,N)[N](),e.setRenderTarget(this.gBuffersRenderTarget),this.renderPass.render(e,this.gBuffersRenderTarget),d(this,A)[A](),d(this,O)[O]||d(this,C)[C].renderPass.render(e,d(this,C)[C].renderTarget),this.fullscreenMaterial.uniforms.inputTexture.value=t.texture,this.fullscreenMaterial.uniforms.samples.value=d(this,U)[U].samples,this.fullscreenMaterial.uniforms.cameraNear.value=this._camera.near,this.fullscreenMaterial.uniforms.cameraFar.value=this._camera.far,e.setRenderTarget(this.renderTarget),e.render(this.scene,this.camera)}}function I(e,t,r,i){d(this,U)[U][i]?t[r]!==e[r]&&(e[r]=t[r],e.uniforms[r].value=t[r],t[r]?e.defines[i]="":delete e.defines[i],e.needsUpdate=!0):void 0!==e[r]&&(e[r]=void 0,e.uniforms[r].value=void 0,delete e.defines[i],e.needsUpdate=!0)}function B(){this._scene.traverse(e=>{if(e.material){let t=e.material,[r,i]=d(this,L)[L].get(e)||[];if(!d(this,L)[L].has(e)||t!==r){i&&i.dispose(),i=new b,d(this,O)[O]&&(i.defines.USE_MRT=""),i.normalScale=t.normalScale,i.uniforms.normalScale.value=t.normalScale;let r=t.map||t.normalMap||t.roughnessMap||t.metalnessMap;r&&(i.uniforms.uvTransform.value=r.matrix),d(this,L)[L].set(e,[t,i])}d(this,F)[F](i,t,"normalMap","USE_NORMALMAP"),d(this,F)[F](i,t,"roughnessMap","USE_ROUGHNESSMAP"),i.uniforms.roughness.value=0===d(this,U)[U].selection.size||d(this,U)[U].selection.has(e)?t.roughness||0:1e11,e.material=i}})}function k(){this._scene.traverse(e=>{if(e.material?.type==="MRTMaterial"){let[t]=d(this,L)[L].get(e);e.material=t}})}let V="#define GLSLIFY 1\n#define MODE_DEFAULT 0\n#define MODE_REFLECTIONS 1\n#define MODE_RAW_REFLECTION 2\n#define MODE_BLURRED_REFLECTIONS 3\n#define MODE_INPUT 4\n#define MODE_BLUR_MIX 5\n#define FLOAT_EPSILON 0.00001\n#define SQRT_3 1.7320508075688772 + FLOAT_EPSILON\nuniform sampler2D inputTexture;uniform sampler2D reflectionsTexture;\n#ifdef ENABLE_BLUR\nuniform sampler2D depthTexture;\n#endif\nuniform float samples;uniform float blurMix;\n#include <bilateralBlur>\nvoid mainImage(const in vec4 inputColor,const in vec2 uv,out vec4 outputColor){vec4 reflectionsTexel=texture2D(reflectionsTexture,vUv);vec3 reflectionClr=reflectionsTexel.xyz;\n#ifdef ENABLE_BLUR\nvec4 blurredReflectionsTexel=blur(reflectionsTexture,depthTexture);reflectionClr=mix(reflectionClr,blurredReflectionsTexel.xyz,blurMix);\n#endif\n#if RENDER_MODE == MODE_DEFAULT\noutputColor=vec4(inputColor.rgb+reflectionClr,1.);\n#endif\n#if RENDER_MODE == MODE_REFLECTIONS\noutputColor=vec4(reflectionClr,1.);\n#endif\n#if RENDER_MODE == MODE_RAW_REFLECTION\noutputColor=vec4(reflectionsTexel.xyz,1.);\n#endif\n#if RENDER_MODE == MODE_BLURRED_REFLECTIONS\n#ifdef ENABLE_BLUR\noutputColor=vec4(blurredReflectionsTexel.xyz,1.);\n#endif\n#endif\n#if RENDER_MODE == MODE_INPUT\noutputColor=vec4(inputColor.xyz,1.);\n#endif\n#if RENDER_MODE == MODE_BLUR_MIX\n#ifdef ENABLE_BLUR\noutputColor=vec4(vec3(blurMix),1.);\n#endif\n#endif\n}".replace("#include <helperFunctions>",y).replace("#include <bilateralBlur>","#define GLSLIFY 1\nconst float KERNEL_RADIUS=5.;uniform float g_Sharpness;uniform vec2 g_InvResolutionDirection;uniform float kernelRadius;float getViewZ(const float depth){return perspectiveDepthToViewZ(depth,cameraNear,cameraFar);}vec4 BlurFunction(sampler2D texSource,sampler2D texLinearDepth,vec2 uv,float r,vec4 center_c,float center_d,inout float w_total,in float radius){vec4 c=texture2D(texSource,uv);float d=getViewZ(1./unpackRGBAToDepth(texture2D(texLinearDepth,uv)));float BlurSigma=radius*0.5;float BlurFalloff=1.0/(2.0*BlurSigma*BlurSigma);float ddiff=(d-center_d)*g_Sharpness*10.;float w=exp2(-r*r*BlurFalloff-ddiff*ddiff);w_total+=w;return c*w;}vec4 blur(sampler2D blurTexture,sampler2D depthTexture){vec4 center_c=texture2D(blurTexture,vUv);float center_d=getViewZ(1./unpackRGBAToDepth(texture2D(depthTexture,vUv)));float radius=kernelRadius;vec4 c_total=center_c;float w_total=1.0;vec2 uv;for(float r=1.;r<=radius;++r){uv=vUv+g_InvResolutionDirection*r;c_total+=BlurFunction(blurTexture,depthTexture,uv,r,center_c,center_d,w_total,radius);}for(float r=1.;r<=radius;++r){uv=vUv-g_InvResolutionDirection*r;c_total+=BlurFunction(blurTexture,depthTexture,uv,r,center_c,center_d,w_total,radius);}return c_total/w_total;}"),z={temporalResolve:!0,temporalResolveMix:.9,temporalResolveCorrectionMix:1,maxSamples:256,resolutionScale:1,width:"undefined"!=typeof window?window.innerWidth:2e3,height:"undefined"!=typeof window?window.innerHeight:1e3,ENABLE_BLUR:!1,blurMix:.5,blurKernelSize:8,blurSharpness:.5,rayStep:.1,intensity:1,maxRoughness:.1,ENABLE_JITTERING:!1,jitter:.1,jitterSpread:.1,jitterRough:0,roughnessFadeOut:1,rayFadeOut:0,MAX_STEPS:20,NUM_BINARY_SEARCH_STEPS:5,maxDepthDifference:10,maxDepth:1,thickness:10,ior:1.45,STRETCH_MISSED_RAYS:!0,USE_MRT:!0,USE_NORMALMAP:!0,USE_ROUGHNESSMAP:!0},G=["ENABLE_BLUR","blurSharpness","blurKernelSize","blurMix"];var H=u("lastSize"),Y=u("lastCameraTransform"),W=u("makeOptionsReactive");class Z extends n.Qm{constructor(e,t,r=z){super("SSREffect",V,{type:"FinalSSRMaterial",uniforms:new Map([["inputTexture",new o.Uniform(null)],["reflectionsTexture",new o.Uniform(null)],["depthTexture",new o.Uniform(null)],["samples",new o.Uniform(0)],["blurMix",new o.Uniform(0)],["g_Sharpness",new o.Uniform(0)],["g_InvResolutionDirection",new o.Uniform(new o.Vector2)],["kernelRadius",new o.Uniform(0)]]),defines:new Map([["RENDER_MODE","0"]])}),Object.defineProperty(this,W,{value:X}),this.samples=0,this.selection=new n.Y1,Object.defineProperty(this,H,{writable:!0,value:void 0}),Object.defineProperty(this,Y,{writable:!0,value:{position:new o.Vector3,quaternion:new o.Quaternion}}),this._scene=e,this._camera=t,r=s({},z,r),this.temporalResolvePass=new w(e,t,"",r),this.temporalResolvePass.fullscreenMaterial.uniforms.samples=new o.Uniform(0),this.temporalResolvePass.fullscreenMaterial.uniforms.maxSamples=new o.Uniform(0),this.temporalResolvePass.fullscreenMaterial.defines.EULER=2.718281828459045,this.temporalResolvePass.fullscreenMaterial.defines.FLOAT_EPSILON=1e-5,this.uniforms.get("reflectionsTexture").value=this.temporalResolvePass.renderTarget.texture,this.reflectionsPass=new j(this,r),this.temporalResolvePass.fullscreenMaterial.uniforms.inputTexture.value=this.reflectionsPass.renderTarget.texture,this.temporalResolvePass.fullscreenMaterial.uniforms.depthTexture.value=this.reflectionsPass.depthTexture,d(this,H)[H]={width:r.width,height:r.height,resolutionScale:r.resolutionScale},d(this,Y)[Y].position.copy(t.position),d(this,Y)[Y].quaternion.copy(t.quaternion),this.setSize(r.width,r.height),d(this,W)[W](r)}setSize(e,t){(e!==d(this,H)[H].width||t!==d(this,H)[H].height||this.resolutionScale!==d(this,H)[H].resolutionScale)&&(this.temporalResolvePass.setSize(e,t),this.reflectionsPass.setSize(e,t),d(this,H)[H]={width:e,height:t,resolutionScale:this.resolutionScale})}checkNeedsResample(){let e=d(this,Y)[Y].position.distanceToSquared(this._camera.position),t=8*(1-d(this,Y)[Y].quaternion.dot(this._camera.quaternion));(e>1e-6||t>1e-6)&&(this.samples=1,d(this,Y)[Y].position.copy(this._camera.position),d(this,Y)[Y].quaternion.copy(this._camera.quaternion))}dispose(){super.dispose(),this.reflectionsPass.dispose(),this.temporalResolvePass.dispose()}update(e,t){this.samples++,this.checkNeedsResample(),this.uniforms.get("samples").value=this.samples,this.reflectionsPass.render(e,t),this.temporalResolvePass.fullscreenMaterial.uniforms.samples.value=this.samples,this.temporalResolvePass.render(e)}}function X(e){e.ENABLE_BLUR&&(this.uniforms.get("depthTexture").value=this.reflectionsPass.depthTexture,this.defines.set("ENABLE_BLUR",""),this.reflectionsPass.fullscreenMaterial.defines.ENABLE_BLUR="");let t=window.devicePixelRatio,r=!1,i=this.reflectionsPass.fullscreenMaterial.uniforms,n=Object.keys(i);for(let a of Object.keys(e))Object.defineProperty(this,a,{get:()=>e[a],set(o){if(e[a]!==o||!r)switch(e[a]=o,G.includes(a)||(this.samples=1),a){case"resolutionScale":this.setSize(e.width,e.height);break;case"width":if(void 0===o)return;this.setSize(o*t,e.height),this.uniforms.get("g_InvResolutionDirection").value.set(1/(o*t),1/e.height);break;case"height":if(void 0===o)return;this.setSize(e.width,o*t),this.uniforms.get("g_InvResolutionDirection").value.set(1/e.width,1/(o*t));break;case"maxSamples":this.temporalResolvePass.fullscreenMaterial.uniforms.maxSamples.value=this.maxSamples;break;case"blurMix":this.uniforms.get("blurMix").value=o;break;case"blurSharpness":this.uniforms.get("g_Sharpness").value=o;break;case"blurKernelSize":this.uniforms.get("kernelRadius").value=o;break;case"MAX_STEPS":this.reflectionsPass.fullscreenMaterial.defines.MAX_STEPS=parseInt(o),this.reflectionsPass.fullscreenMaterial.needsUpdate=r;break;case"NUM_BINARY_SEARCH_STEPS":this.reflectionsPass.fullscreenMaterial.defines.NUM_BINARY_SEARCH_STEPS=parseInt(o),this.reflectionsPass.fullscreenMaterial.needsUpdate=r;break;case"ENABLE_JITTERING":o?this.reflectionsPass.fullscreenMaterial.defines.ENABLE_JITTERING="":delete this.reflectionsPass.fullscreenMaterial.defines.ENABLE_JITTERING,this.reflectionsPass.fullscreenMaterial.needsUpdate=r;break;case"STRETCH_MISSED_RAYS":o?this.reflectionsPass.fullscreenMaterial.defines.STRETCH_MISSED_RAYS="":delete this.reflectionsPass.fullscreenMaterial.defines.STRETCH_MISSED_RAYS,this.reflectionsPass.fullscreenMaterial.needsUpdate=r;break;case"USE_NORMALMAP":case"USE_ROUGHNESSMAP":break;case"temporalResolve":let l=o?"#define GLSLIFY 1\nfloat alpha=min(inputTexel.a,accumulatedTexel.a);alpha=didReproject&&(samples<4.||velocityDisocclusion<FLOAT_EPSILON)?(0.05+alpha): 0.;if(maxSamples!=0.&&samples>maxSamples&&alpha>1.-FLOAT_EPSILON){gl_FragColor=accumulatedTexel;return;}if(!didReproject){gl_FragColor=vec4(averageNeighborColor,alpha);return;}if(length(accumulatedTexel.rgb)>FLOAT_EPSILON&&length(inputTexel.rgb)==0.){gl_FragColor=accumulatedTexel;return;}if(alpha<1.){outputColor=mix(accumulatedTexel.rgb,inputTexel.rgb,(1.-alpha*alpha)*temporalResolveCorrectionMix);}else if(samples>4.&&movement<FLOAT_EPSILON&&length(accumulatedTexel.rgb)<FLOAT_EPSILON){outputColor=accumulatedTexel.rgb;}else if(1./samples>=1.-temporalResolveMix){outputColor=accumulatedTexel.rgb*temporalResolveMix+inputTexel.rgb*(1.-temporalResolveMix);}else{float mixVal=(1./samples)/EULER;if(alpha<FLOAT_EPSILON&&samples<15.)mixVal+=0.3;outputColor=mix(accumulatedTexel.rgb,inputTexel.rgb,mixVal);}":"#define GLSLIFY 1\naccumulatedTexel=textureLod(accumulatedTexture,vUv,0.);float alpha=min(inputTexel.a,accumulatedTexel.a);alpha=samples<2.||movement<FLOAT_EPSILON ?(0.05+alpha): 0.;if(maxSamples!=0.&&samples>maxSamples&&alpha>1.-FLOAT_EPSILON){outputColor=accumulatedTexel.rgb;}else{float samplesMultiplier=pow(samples/32.,4.)+1.;if(samples>1.&&alpha>1.-FLOAT_EPSILON){outputColor=accumulatedTexel.rgb*(1.-1./(samples*samplesMultiplier))+inputTexel.rgb/(samples*samplesMultiplier);}else{outputColor=inputTexel.rgb;}}",s=p;if(!o){let e=s.slice(s.indexOf("// REPROJECT_START"),s.indexOf("// REPROJECT_END")+16);s=p.replace(e,"")}s=`
							uniform float samples;
							uniform float maxSamples;
							uniform float temporalResolveMix;
							`+(s=s.replace("#include <custom_compose_shader>",l)),this.temporalResolvePass.fullscreenMaterial.fragmentShader=s,this.temporalResolvePass.fullscreenMaterial.needsUpdate=!0;break;case"temporalResolveMix":this.temporalResolvePass.fullscreenMaterial.uniforms.temporalResolveMix.value=o;break;case"temporalResolveCorrectionMix":this.temporalResolvePass.fullscreenMaterial.uniforms.temporalResolveCorrectionMix.value=o;break;default:n.includes(a)&&(i[a].value=o)}}}),this[a]=e[a];r=!0}let J=function(e,t){return void 0===t&&(t=n.YQ.NORMAL),(0,a.forwardRef)(function(r,i){let{blendFunction:n,opacity:o,...s}=r,c=(0,l.z)(e=>e.invalidate),u=(0,a.useMemo)(()=>new e(s),[s]);return(0,a.useLayoutEffect)(()=>{u.blendMode.blendFunction=n||0===n?n:t,void 0!==o&&(u.blendMode.opacity.value=o),c()},[n,u.blendMode,o]),a.createElement("primitive",{ref:i,object:u,dispose:null})})},$=(e,t)=>{let r=e[t];return(0,a.useMemo)(()=>{if(r instanceof o.Vector2)return new o.Vector2().set(r.x,r.y);if(Array.isArray(r)){let[e,t]=r;return new o.Vector2().set(e,t)}},[r])};J(n.rk,n.YQ.ADD),J(n.at);let q=(0,a.forwardRef)(function(e,t){let r=$(e,"offset"),i=(0,a.useMemo)(()=>new n.YY({...e,offset:r}),[r,e]);return a.createElement("primitive",{ref:t,object:i,dispose:null})});J(n.zo),J(n.AL);let K=(0,a.createContext)(null),Q=a.memo((0,a.forwardRef)((e,t)=>{let{children:r,camera:s,scene:c,resolutionScale:u,enabled:d=!0,renderPriority:f=1,autoClear:p=!0,depthBuffer:m,disableNormalPass:h,stencilBuffer:v,multisampling:x=8,frameBufferType:g=o.HalfFloatType}=e,{gl:T,scene:_,camera:S,size:M}=(0,l.z)();c=c||_,s=s||S;let[R,E,w]=(0,a.useMemo)(()=>{let e=function(){var e;if(void 0!==i)return i;try{let t;let r=document.createElement("canvas");return i=!!(window.WebGL2RenderingContext&&(t=r.getContext("webgl2"))),t&&(null==(e=t.getExtension("WEBGL_lose_context"))||e.loseContext()),i}catch(e){return i=!1}}(),t=new n.xC(T,{depthBuffer:m,stencilBuffer:v,multisampling:x>0&&e?x:0,frameBufferType:g});t.addPass(new n.CD(c,s));let r=null,a=null;return!h&&((a=new n.gh(c,s)).enabled=!1,t.addPass(a),void 0!==u&&e&&((r=new n.xs({normalBuffer:a.texture,resolutionScale:u})).enabled=!1,t.addPass(r))),[t,a,r]},[s,T,m,v,x,g,c,h,u]);(0,a.useEffect)(()=>null==R?void 0:R.setSize(M.width,M.height),[R,M]),(0,l.A)((e,t)=>{d&&(T.autoClear=p,R.render(t))},d?f:0);let y=(0,a.useRef)(null);(0,a.useLayoutEffect)(()=>{let e;return y.current&&y.current.__r3f&&R&&((e=new n.H5(s,...y.current.__r3f.objects)).renderToScreen=!0,R.addPass(e),E&&(E.enabled=!0),w&&(w.enabled=!0)),()=>{e&&(null==R||R.removePass(e)),E&&(E.enabled=!1),w&&(w.enabled=!1)}},[R,r,s,E,w]);let b=(0,a.useMemo)(()=>({composer:R,normalPass:E,downSamplingPass:w,resolutionScale:u,camera:s,scene:c}),[R,E,w,u,s,c]);return(0,a.useImperativeHandle)(t,()=>R,[R]),a.createElement(K.Provider,{value:b},a.createElement("group",{ref:y},r))}));J(n.ol),J(n.JL),J(n.xV,n.YQ.COLOR_DODGE);let ee=(0,a.createContext)(null);J(n.p$,n.YQ.OVERLAY),J(n.wL);let et=J(n.M4);J(n.Dd),J(n.Uy);let er=(0,a.forwardRef)(function(e,t){let{ENABLE_BLUR:r=!0,USE_MRT:i=!0,...n}=e,{invalidate:o}=(0,l.z)(),{scene:s,camera:c}=(0,a.useContext)(K),u=(0,a.useMemo)(()=>new Z(s,c,{ENABLE_BLUR:r,USE_MRT:i,...n}),[Z,s,c,r,i]);(0,a.useLayoutEffect)(()=>{Object.keys(n).forEach(e=>u[e]=n[e]),o()},[n]);let d=(0,a.useContext)(ee);return(0,a.useEffect)(()=>{if(d&&d.enabled){var e;if(null!=(e=d.selected)&&e.length)return u.selection.set(d.selected),o(),()=>{u.selection.clear(),o()}}},[d]),a.createElement("primitive",{ref:t,object:u})})}}]);